// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  BncapiApiPingData,
  BncapiApiPingResponses,
  UsersApiMeData,
  UsersApiMeResponses,
  UsersApiListUsersData,
  UsersApiListUsersResponses,
  UsersApiGetUserData,
  UsersApiGetUserResponses,
  UsersApiLoginData,
  UsersApiLoginResponses,
  UsersApiSignupData,
  UsersApiSignupResponses,
  GamesApiListRoomsData,
  GamesApiListRoomsResponses,
  GamesApiCreateRoomData,
  GamesApiCreateRoomResponses,
  GamesApiGetRoomData,
  GamesApiGetRoomResponses,
  GamesApiCreateRandomSingleplayerRoomData,
  GamesApiCreateRandomSingleplayerRoomResponses,
  GamesApiCheckGameData,
  GamesApiCheckGameResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  usersApiLoginResponseTransformer,
  usersApiSignupResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Ping
 */
export const bncapiApiPing = <ThrowOnError extends boolean = false>(
  options?: Options<BncapiApiPingData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    BncapiApiPingResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/ping",
    ...options,
  });
};

/**
 * Get current user
 */
export const usersApiMe = <ThrowOnError extends boolean = false>(
  options?: Options<UsersApiMeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersApiMeResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/me",
    ...options,
  });
};

/**
 * List all users
 */
export const usersApiListUsers = <ThrowOnError extends boolean = false>(
  options?: Options<UsersApiListUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersApiListUsersResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/",
    ...options,
  });
};

/**
 * Get user by ID
 */
export const usersApiGetUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersApiGetUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    UsersApiGetUserResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/{user_id}",
    ...options,
  });
};

/**
 * Login user
 */
export const usersApiLogin = <ThrowOnError extends boolean = false>(
  options: Options<UsersApiLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UsersApiLoginResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: usersApiLoginResponseTransformer,
    url: "/api/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Register user
 */
export const usersApiSignup = <ThrowOnError extends boolean = false>(
  options: Options<UsersApiSignupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UsersApiSignupResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: usersApiSignupResponseTransformer,
    url: "/api/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all rooms
 */
export const gamesApiListRooms = <ThrowOnError extends boolean = false>(
  options?: Options<GamesApiListRoomsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GamesApiListRoomsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/games/rooms",
    ...options,
  });
};

/**
 * Create a new room
 */
export const gamesApiCreateRoom = <ThrowOnError extends boolean = false>(
  options: Options<GamesApiCreateRoomData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GamesApiCreateRoomResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/games/rooms",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get room by ID
 */
export const gamesApiGetRoom = <ThrowOnError extends boolean = false>(
  options: Options<GamesApiGetRoomData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GamesApiGetRoomResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/games/rooms/{room_id}",
    ...options,
  });
};

/**
 * Create a new singleplayer room with random secret code
 */
export const gamesApiCreateRandomSingleplayerRoom = <
  ThrowOnError extends boolean = false
>(
  options: Options<GamesApiCreateRandomSingleplayerRoomData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GamesApiCreateRandomSingleplayerRoomResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/games/quick-play",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check guess for bulls and cows
 */
export const gamesApiCheckGame = <ThrowOnError extends boolean = false>(
  options: Options<GamesApiCheckGameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GamesApiCheckGameResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/games/check",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
